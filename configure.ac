# -*- shell-script -*-
#
# Copyright (c) 2016      Intel, Inc. All rights reserved
# $COPYRIGHT$
#
# Additional copyrights may follow
#
# $HEADER$
#

############################################################################
# Initialization, version number, and other random setup/init stuff
############################################################################

# Load in everything found by autogen.pl
m4_include([config/autogen_found_items.m4])

# We don't have the version number to put in here yet, and we can't
# call WW_GET_VERSION (etc.) before AC_INIT.  So use the shell
# version.

AC_INIT([warewulf],
        [m4_normalize(esyscmd([config/ww_get_version.sh VERSION --tarball]))],
        [warewulf-devel@lbl.gov], [warewulf])
AC_PREREQ(2.59)
AC_CONFIG_AUX_DIR(./config)
# Note that this directory must *exactly* match what was specified via
# -I in ACLOCAL_AMFLAGS in the top-level Makefile.am.
AC_CONFIG_MACRO_DIRS(./config)

# Get our platform support file.  This has to be done very, very early
# because it twiddles random bits of autoconf
WW_LOAD_PLATFORM

# setup configure options (e.g., show_title and friends)
WW_CONFIGURE_SETUP
ww_show_title "Configuring Warewulf"

# This must be before AM_INIT_AUTOMAKE
AC_CANONICAL_TARGET

# Init automake
AM_INIT_AUTOMAKE([foreign dist-bzip2 subdir-objects no-define 1.12.2 -Wall -Werror])

# SILENT_RULES is new in AM 1.11, but we require 1.11 or higher via
# autogen.  Limited testing shows that calling SILENT_RULES directly
# works in more cases than adding "silent-rules" to INIT_AUTOMAKE
# (even though they're supposed to be identical).  Shrug.
AM_SILENT_RULES([yes])

# set the languages
AC_LANG([C])
AC_PATH_PROG(PERLBIN, perl)
if test -z "$PERLBIN"; then
    AC_MSG_ERROR([perl not found])
fi
AC_SUBST(PERLBIN)

AC_MSG_CHECKING(for Perl lib location)
WW_PERLLIBDIR="$prefix/lib/"
AC_ARG_WITH(perllibdir, [  --perllibdir=path       Path to install Perl libraries ('auto' uses standard perl location)], [
if test -n "$withval" -a "$withval" == "auto" ; then
    eval `perl -V:installvendorlib`
    WW_PERLLIBDIR=$installvendorlib
elif test -n "$withval" -a "$withval" != "no" ; then
    WW_PERLLIBDIR=$withval
fi
])
AC_MSG_RESULT($WW_PERLLIBDIR)
AC_SUBST(WW_PERLLIBDIR)


# AC_USE_SYSTEM_EXTENSIONS will modify CFLAGS if nothing was in there
# beforehand.  We don't want that.  So if there was nothing in
# CFLAGS, put nothing back in there.
WW_VAR_SCOPE_PUSH([CFLAGS_save])
CFLAGS_save=$CFLAGS
AC_USE_SYSTEM_EXTENSIONS
AS_IF([test -z "$CFLAGS_save"], [CFLAGS=])
WW_VAR_SCOPE_POP

####################################################################
# Setup the configure header files
####################################################################

AH_TOP([/* -*- c -*-
 *
 * Copyright (c) 2016      Intel, Inc. All rights reserved
 * $COPYRIGHT$
 *
 * Additional copyrights may follow
 *
 * $HEADER$
 *
 * This file is automatically generated by configure.  Edits will be lost
 * the next time you run configure!
 */

#ifndef WW_CONFIG_H
#define WW_CONFIG_H

#include <src/include/ww_config_top.h>

])
AH_BOTTOM([
#include <src/include/ww_config_bottom.h>
#endif /* WW_CONFIG_H */
])

############################################################################
# Setup Libtool
############################################################################

# We want new Libtool.  None of that old stuff.  Pfft.
m4_ifdef([LT_PREREQ], [],
         [m4_fatal([libtool version 2.2.6 or higher is required], [63])])
LT_PREREQ([2.2.6])

#
# Enable static so that we have the --with tests done up here and can
# check for OS.  Save the values of $enable_static and $enable_shared
# before setting the defaults, because if the user specified
# --[en|dis]able-[static|shared] on the command line, they'll already
# be set.  In this way, we can tell if the user requested something or
# if the default was set here.
#

ww_enable_shared="$enable_shared"
ww_enable_static="$enable_static"
AM_ENABLE_SHARED
AM_DISABLE_STATIC

# This did not exist pre AM 1.11.x (where x is somewhere >0 and <3),
# but it is necessary in AM 1.12.x.
m4_ifdef([AM_PROG_AR], [AM_PROG_AR])
AM_PROG_LEX

LT_INIT()
LT_LANG([C])
LT_LANG([C++])

############################################################################
# Configuration options
############################################################################

# Define WW configure arguments
WW_DEFINE_ARGS
# Define some basic useful values
WW_BASIC_SETUP

# If debug mode, add -g
AS_IF([test "$ww_debug" = "1"],
      [CFLAGS="$CFLAGS -g"])


############################################################################
# Setup the core
############################################################################
WW_SETUP_CORE


####################################################################
# Setup C compiler
####################################################################

CFLAGS_save="$CFLAGS"
AC_PROG_CC
CFLAGS="$CFLAGS_save"

AC_ARG_VAR(CC_FOR_BUILD,[build system C compiler])
AS_IF([test -z "$CC_FOR_BUILD"],[
    AC_SUBST([CC_FOR_BUILD], [$CC])
])

WW_SETUP_CC

#
# Delayed the substitution of CFLAGS and CXXFLAGS until now because
# they may have been modified throughout the course of this script.
#

AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)

ww_show_title "Final compiler flags"

AC_MSG_CHECKING([final CPPFLAGS])
AC_MSG_RESULT([$CPPFLAGS])

AC_MSG_CHECKING([final CFLAGS])
AC_MSG_RESULT([$CFLAGS])

####################################################################
# Version information
####################################################################

# WW_VERSION was setup by WW_SETUP_CORE above.

# Make configure depend on the VERSION file, since it's used in AC_INIT
AC_SUBST([CONFIGURE_DEPENDENCIES], ['$(top_srcdir)/VERSION'])

. $srcdir/VERSION
AC_SUBST([libww_so_version])

####################################################################
# Complete
####################################################################

ww_show_title "Configuration complete"

AC_OUTPUT

WW_SUMMARY_PRINT
